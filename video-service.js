const ffmpeg = require('fluent-ffmpeg');
const fs = require('fs-extra');
const path = require('path');
const { v4: uuidv4 } = require('uuid');

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SRT —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
 */
async function generateSubtitles(text, duration, outputDir) {
    const srtPath = path.join(outputDir, `subtitles_${uuidv4()}.srt`);
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
    const cleanText = text.trim();
    if (!cleanText) {
        throw new Error('–¢–µ–∫—Å—Ç –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –ø—É—Å—Ç–æ–π');
    }
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ 40-50 —Å–∏–º–≤–æ–ª–æ–≤)
    const maxCharsPerSubtitle = 45;
    const words = cleanText.split(' ');
    const subtitles = [];
    let currentSubtitle = '';
    
    for (const word of words) {
        if ((currentSubtitle + ' ' + word).length <= maxCharsPerSubtitle) {
            currentSubtitle = currentSubtitle ? currentSubtitle + ' ' + word : word;
        } else {
            if (currentSubtitle) {
                subtitles.push(currentSubtitle);
            }
            currentSubtitle = word;
        }
    }
    
    if (currentSubtitle) {
        subtitles.push(currentSubtitle);
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—É–±—Ç–∏—Ç—Ä–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
    if (subtitles.length > 6) {
        const combined = [];
        for (let i = 0; i < subtitles.length; i += 2) {
            if (i + 1 < subtitles.length) {
                combined.push(subtitles[i] + ' ' + subtitles[i + 1]);
            } else {
                combined.push(subtitles[i]);
            }
        }
        subtitles.splice(0, subtitles.length, ...combined);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
    const timePerSubtitle = duration / subtitles.length;
    let srtContent = '';
    
    for (let i = 0; i < subtitles.length; i++) {
        const startTime = i * timePerSubtitle;
        const endTime = (i + 1) * timePerSubtitle;
        
        const startTimecode = formatTimecode(startTime);
        const endTimecode = formatTimecode(endTime);
        
        srtContent += `${i + 1}\n`;
        srtContent += `${startTimecode} --> ${endTimecode}\n`;
        srtContent += `${subtitles[i]}\n\n`;
    }
    
    await fs.writeFile(srtPath, srtContent, 'utf8');
    console.log(`‚úÖ SRT —Å—É–±—Ç–∏—Ç—Ä—ã —Å–æ–∑–¥–∞–Ω—ã: ${srtPath}`);
    return srtPath;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç SRT (HH:MM:SS,mmm)
 */
function formatTimecode(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = Math.floor(seconds % 60);
    const milliseconds = Math.floor((seconds % 1) * 1000);
    
    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')},${String(milliseconds).padStart(3, '0')}`;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∞—É–¥–∏–æ (15 —Å–µ–∫—É–Ω–¥, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 720x1280)
 */
async function createVideo(imagePaths, audioPath, text, outputPath) {
    return new Promise(async (resolve, reject) => {
        console.log('üé¨ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 720x1280)...');
        console.log(`üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imagePaths.length}`);
        console.log(`üéµ –ê—É–¥–∏–æ —Ñ–∞–π–ª: ${audioPath}`);
        console.log(`üìù –¢–µ–∫—Å—Ç: "${text}"`);

        try {
            if (!(await fs.pathExists(audioPath))) {
                return reject(new Error('–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ' + audioPath));
            }

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
            if (await fs.pathExists(outputPath)) {
                await fs.remove(outputPath);
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SRT —Å—É–±—Ç–∏—Ç—Ä—ã
            console.log('üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é SRT —Å—É–±—Ç–∏—Ç—Ä—ã...');
            const subtitlesPath = await generateSubtitles(text, 15, path.dirname(outputPath));

            let command = ffmpeg();

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            imagePaths.forEach(p => command.input(p));
            command.input(audioPath); // –∞—É–¥–∏–æ

            // –§–∏–ª—å—Ç—Ä –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
            const filterComplex = imagePaths.length === 1
                ? `[0:v]scale=720:1280:force_original_aspect_ratio=decrease,pad=720:1280:(ow-iw)/2:(oh-ih)/2[v];[1:a]atrim=duration=15,asetpts=PTS-STARTPTS[a]`
                : (() => {
                    let filters = '';
                    imagePaths.forEach((_, i) => {
                        const f = `[${i}:v]scale=720:1280:force_original_aspect_ratio=decrease,pad=720:1280:(ow-iw)/2:(oh-ih)/2[v${i}]`;
                        filters += i === 0 ? f : `;${f}`;
                    });
                    const concat = imagePaths.map((_, i) => `[v${i}]`).join('');
                    return `${filters};${concat}concat=n=${imagePaths.length}:v=1:a=0[v];[1:a]atrim=duration=15,asetpts=PTS-STARTPTS[a]`;
                })();

            command
                .complexFilter(filterComplex, ['v', 'a'])
                .videoCodec('libx264')
                .audioCodec('aac')
                .outputOptions([
                    '-preset fast',
                    '-crf 23',
                    '-b:a 128k',
                    '-t 15',
                    '-movflags +faststart'
                ])
                .videoFilters([
                    `subtitles='${subtitlesPath}':force_style='FontName=Arial,FontSize=16,PrimaryColour=&Hffffff,OutlineColour=&H000000,Outline=2,Alignment=2,MarginV=50'`
                ])
                .output(outputPath)
                .on('start', cmd => console.log('üöÄ FFmpeg:', cmd))
                .on('progress', p => console.log(`üìä ${p.percent?.toFixed(1)}%`))
                .on('end', async () => {
                    try {
                        await fs.remove(subtitlesPath);
                        console.log('üìÑ SRT —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
                    } catch (e) {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª—ë–Ω SRT:', e.message);
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                    if (!(await fs.pathExists(outputPath))) {
                        return reject(new Error('–§–∞–π–ª –≤–∏–¥–µ–æ –Ω–µ —Å–æ–∑–¥–∞–Ω'));
                    }

                    const stats = await fs.stat(outputPath);
                    if (stats.size < 1024) {
                        return reject(new Error('–í–∏–¥–µ–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π'));
                    }

                    console.log('‚úÖ –í–∏–¥–µ–æ —Å –æ–∑–≤—É—á–∫–æ–π –≥–æ—Ç–æ–≤–æ (720x1280):', outputPath);
                    resolve(outputPath);
                })
                .on('error', async (err) => {
                    try {
                        await fs.remove(subtitlesPath);
                    } catch (e) {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª—ë–Ω SRT:', e.message);
                    }
                    console.error('‚ùå –û—à–∏–±–∫–∞ FFmpeg:', err.message || err);
                    reject(err);
                })
                .run();

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', err);
            reject(err);
        }
    });
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–∏–¥–µ–æ –±–µ–∑ –∞—É–¥–∏–æ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 720x1280)
 */
async function createSimpleVideo(imagePaths, text, outputPath) {
    return new Promise(async (resolve, reject) => {
        console.log('üé¨ –°–æ–∑–¥–∞—é –ø—Ä–æ—Å—Ç–æ–µ –≤–∏–¥–µ–æ –±–µ–∑ –∞—É–¥–∏–æ (720x1280)...');

        try {
            if (!(await fs.pathExists(imagePaths[0]))) {
                return reject(new Error('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'));
            }

            if (await fs.pathExists(outputPath)) {
                await fs.remove(outputPath);
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SRT —Å—É–±—Ç–∏—Ç—Ä—ã
            console.log('üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é SRT —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–∏–¥–µ–æ...');
            const subtitlesPath = await generateSubtitles(text, 15, path.dirname(outputPath));

            ffmpeg(imagePaths[0])
                .videoFilters([
                    'scale=720:1280:force_original_aspect_ratio=decrease',
                    'pad=720:1280:(ow-iw)/2:(oh-ih)/2',
                    `subtitles='${subtitlesPath}':force_style='FontName=Arial,FontSize=16,PrimaryColour=&Hffffff,OutlineColour=&H000000,Outline=2,Alignment=2,MarginV=50'`
                ])
                .videoCodec('libx264')
                .outputOptions([
                    '-preset fast',
                    '-crf 23',
                    '-t 15'
                ])
                .output(outputPath)
                .on('end', async () => {
                    try {
                        await fs.remove(subtitlesPath);
                        console.log('üìÑ SRT —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
                    } catch (e) {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª—ë–Ω SRT:', e.message);
                    }
                    console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ (720x1280):', outputPath);
                    resolve(outputPath);
                })
                .on('error', async (err) => {
                    try {
                        await fs.remove(subtitlesPath);
                    } catch (e) {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª—ë–Ω SRT:', e.message);
                    }
                    console.error('‚ùå –û—à–∏–±–∫–∞:', err.message || err);
                    reject(err);
                })
                .run();
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', err);
            reject(err);
        }
    });
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ FFmpeg
 */
function checkFFmpeg() {
    return new Promise((resolve) => {
        ffmpeg.getAvailableFormats((err, formats) => {
            if (err) {
                console.error('‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω:', err.message);
                resolve(false);
            } else {
                console.log('‚úÖ FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω');
                resolve(true);
            }
        });
    });
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–µ
 */
function getVideoInfo(videoPath) {
    return new Promise((resolve, reject) => {
        ffmpeg.ffprobe(videoPath, (err, metadata) => {
            if (err) {
                reject(err);
            } else {
                resolve(metadata);
            }
        });
    });
}

module.exports = {
    createVideo,
    createSimpleVideo,
    checkFFmpeg,
    getVideoInfo,
    generateSubtitles
};
