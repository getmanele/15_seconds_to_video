const ffmpeg = require('fluent-ffmpeg');
const fs = require('fs-extra');
const path = require('path');
const { v4: uuidv4 } = require('uuid');

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∞—É–¥–∏–æ (15 —Å–µ–∫—É–Ω–¥)
 */
async function createVideo(imagePaths, audioPath, text, outputPath) {
    return new Promise(async (resolve, reject) => {
        console.log('üé¨ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ...');
        console.log(`üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imagePaths.length}`);
        console.log(`üéµ –ê—É–¥–∏–æ —Ñ–∞–π–ª: ${audioPath}`);
        console.log(`üìù –¢–µ–∫—Å—Ç: "${text}"`);

        try {
            if (!(await fs.pathExists(audioPath))) {
                return reject(new Error('–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ' + audioPath));
            }

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
            if (await fs.pathExists(outputPath)) {
                await fs.remove(outputPath);
            }

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç: —É–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏, –ø–µ—Ä–µ–Ω–æ—Å—ã, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
            const cleanText = text
                .replace(/"/g, '')
                .replace(/'/g, '')
                .replace(/\n/g, ' ')
                .replace(/\r/g, ' ')
                .trim()
                .substring(0, 200);

            const textFilePath = path.join(path.dirname(outputPath), `text_${uuidv4()}.txt`);
            await fs.writeFile(textFilePath, cleanText, 'utf8');

            let command = ffmpeg();

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            imagePaths.forEach(p => command.input(p));
            command.input(audioPath); // –∞—É–¥–∏–æ

            // –§–∏–ª—å—Ç—Ä
            const filterComplex = imagePaths.length === 1
                ? `[0:v]scale=1280:720:force_original_aspect_ratio=decrease,pad=1280:720:(ow-iw)/2:(oh-ih)/2,drawtext=textfile='${textFilePath}':fontsize=24:fontcolor=white:x=(w-text_w)/2:y=h-th-20:shadowcolor=black:shadowx=2:shadowy=2[v];[1:a]atrim=duration=15,asetpts=PTS-STARTPTS[a]`
                : (() => {
                    let filters = '';
                    imagePaths.forEach((_, i) => {
                        const f = `[${i}:v]scale=1280:720:force_original_aspect_ratio=decrease,pad=1280:720:(ow-iw)/2:(oh-ih)/2,drawtext=textfile='${textFilePath}':fontsize=24:fontcolor=white:x=(w-text_w)/2:y=h-th-20:shadowcolor=black:shadowx=2:shadowy=2[v${i}]`;
                        filters += i === 0 ? f : `;${f}`;
                    });
                    const concat = imagePaths.map((_, i) => `[v${i}]`).join('');
                    return `${filters};${concat}concat=n=${imagePaths.length}:v=1:a=0[v];[1:a]atrim=duration=15,asetpts=PTS-STARTPTS[a]`;
                })();

            // –ö–ª—é—á–µ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
            // - –£–±—Ä–∞–Ω—ã .outputOptions —Å -c:v –∏ -c:a
            // - –ò—Å–ø–æ–ª—å–∑—É–µ–º .videoCodec() –∏ .audioCodec()
            // - –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω .map()
            // - –ò—Å–ø–æ–ª—å–∑—É–µ–º .output(), –∞ –Ω–µ .save()
            command
                .complexFilter(filterComplex, ['v', 'a'])
                .map('[v]')
                .map('[a]')
                .videoCodec('libx264')
                .audioCodec('aac')
                .outputOptions([
                    '-preset fast',
                    '-crf 23',
                    '-b:a 128k',
                    '-t 15',
                    '-movflags +faststart'
                ])
                .output(outputPath)
                .on('start', cmd => console.log('üöÄ FFmpeg:', cmd))
                .on('progress', p => console.log(`üìä ${p.percent?.toFixed(1)}%`))
                .on('end', async () => {
                    try {
                        await fs.remove(textFilePath);
                    } catch (e) {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª—ë–Ω —Ç–µ–∫—Å—Ç:', e.message);
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                    if (!(await fs.pathExists(outputPath))) {
                        return reject(new Error('–§–∞–π–ª –≤–∏–¥–µ–æ –Ω–µ —Å–æ–∑–¥–∞–Ω'));
                    }

                    const stats = await fs.stat(outputPath);
                    if (stats.size < 1024) {
                        return reject(new Error('–í–∏–¥–µ–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π'));
                    }

                    console.log('‚úÖ –í–∏–¥–µ–æ —Å –æ–∑–≤—É—á–∫–æ–π –≥–æ—Ç–æ–≤–æ:', outputPath);
                    resolve(outputPath);
                })
                .on('error', async (err) => {
                    try {
                        await fs.remove(textFilePath);
                    } catch (e) {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª—ë–Ω —Ç–µ–∫—Å—Ç:', e.message);
                    }
                    console.error('‚ùå –û—à–∏–±–∫–∞ FFmpeg:', err.message || err);
                    reject(err);
                })
                .run();

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', err);
            reject(err);
        }
    });
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–∏–¥–µ–æ –±–µ–∑ –∞—É–¥–∏–æ
 */
async function createSimpleVideo(imagePaths, text, outputPath) {
    return new Promise(async (resolve, reject) => {
        console.log('üé¨ –°–æ–∑–¥–∞—é –ø—Ä–æ—Å—Ç–æ–µ –≤–∏–¥–µ–æ –±–µ–∑ –∞—É–¥–∏–æ...');

        try {
            if (!(await fs.pathExists(imagePaths[0]))) {
                return reject(new Error('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'));
            }

            if (await fs.pathExists(outputPath)) {
                await fs.remove(outputPath);
            }

            const cleanText = text
                .replace(/"/g, '')
                .replace(/'/g, '')
                .replace(/\n/g, ' ')
                .substring(0, 200);

            const textFilePath = path.join(path.dirname(outputPath), `text_simple_${uuidv4()}.txt`);
            await fs.writeFile(textFilePath, cleanText, 'utf8');

            ffmpeg(imagePaths[0])
                .videoFilters([
                    'scale=1280:720:force_original_aspect_ratio=decrease',
                    'pad=1280:720:(ow-iw)/2:(oh-ih)/2',
                    `drawtext=textfile='${textFilePath}':fontsize=24:fontcolor=white:x=(w-text_w)/2:y=h-th-20:shadowcolor=black:shadowx=2:shadowy=2`
                ])
                .videoCodec('libx264')
                .outputOptions([
                    '-preset fast',
                    '-crf 23',
                    '-t 15'
                ])
                .output(outputPath)
                .on('end', async () => {
                    try {
                        await fs.remove(textFilePath);
                    } catch (e) {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª—ë–Ω —Ç–µ–∫—Å—Ç:', e.message);
                    }
                    console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ:', outputPath);
                    resolve(outputPath);
                })
                .on('error', async (err) => {
                    try {
                        await fs.remove(textFilePath);
                    } catch (e) {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª—ë–Ω —Ç–µ–∫—Å—Ç:', e.message);
                    }
                    console.error('‚ùå –û—à–∏–±–∫–∞:', err.message || err);
                    reject(err);
                })
                .run();
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', err);
            reject(err);
        }
    });
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ FFmpeg
 */
function checkFFmpeg() {
    return new Promise((resolve) => {
        ffmpeg.getAvailableFormats((err, formats) => {
            if (err) {
                console.error('‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω:', err.message);
                resolve(false);
            } else {
                console.log('‚úÖ FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω');
                resolve(true);
            }
        });
    });
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–µ
 */
function getVideoInfo(videoPath) {
    return new Promise((resolve, reject) => {
        ffmpeg.ffprobe(videoPath, (err, metadata) => {
            if (err) {
                reject(err);
            } else {
                resolve(metadata);
            }
        });
    });
}

module.exports = {
    createVideo,
    createSimpleVideo,
    checkFFmpeg,
    getVideoInfo
};
