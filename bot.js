const { Telegraf, Markup } = require('telegraf');
const fs = require('fs-extra');
const path = require('path');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');
const { generateTTS } = require('./tts-service');
const { createVideo, createSimpleVideo, checkFFmpeg } = require('./video-service');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = '6231952257:AAG79igBRce79l-ZIunBHsOIzEKwmZuy-Tk';
const bot = new Telegraf(BOT_TOKEN);

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const UPLOADS_DIR = path.join(__dirname, 'uploads');
const OUTPUT_DIR = path.join(__dirname, 'output');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–ø–æ–∫
fs.ensureDirSync(UPLOADS_DIR);
fs.ensureDirSync(OUTPUT_DIR);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userData = new Map();

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function createMainKeyboard(user = {}) {
    const hasImages = user.images && user.images.length > 0;
    const hasText = user.text && user.text.trim();
    const selectedVoice = user.voice || 'female';
    
    const buttons = [
        [`üì∑ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É${hasImages ? ' ‚úÖ' : ''}`],
        [`üìù –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç${hasText ? ' ‚úÖ' : ''}`],
        [`üéµ –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ (${selectedVoice === 'female' ? '–∂–µ–Ω—Å–∫–∏–π' : '–º—É–∂—Å–∫–æ–π'})`]
    ];
    
    return Markup.keyboard(buttons).resize();
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
const voiceKeyboard = Markup.keyboard([
    ['üéµ –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å'],
    ['üéµ –ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
]).resize();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
    const userId = ctx.from.id;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = {
        images: [],
        text: '',
        voice: 'female', // –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        state: 'idle'
    };
    userData.set(userId, user);
    
    ctx.reply('–ü–æ—Ä–∞–±–æ—Ç–∞–µ–º?! =)', createMainKeyboard(user));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
bot.hears(/üì∑ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É/, (ctx) => {
    const userId = ctx.from.id;
    const user = userData.get(userId) || { images: [], text: '', voice: 'female', state: 'idle' };
    
    user.state = 'waiting_for_image';
    userData.set(userId, user);
    
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üì∏', Markup.keyboard([['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]).resize());
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç"
bot.hears(/üìù –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç/, (ctx) => {
    const userId = ctx.from.id;
    const user = userData.get(userId) || { images: [], text: '', voice: 'female', state: 'idle' };
    
    user.state = 'waiting_for_text';
    userData.set(userId, user);
    
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤):', Markup.keyboard([['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]).resize());
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞"
bot.hears(/üéµ –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞/, (ctx) => {
    const userId = ctx.from.id;
    const user = userData.get(userId) || { images: [], text: '', voice: 'female', state: 'idle' };
    
    user.state = 'choosing_voice';
    userData.set(userId, user);
    
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏:', voiceKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
bot.hears('üéµ –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å', (ctx) => {
    const userId = ctx.from.id;
    const user = userData.get(userId) || { images: [], text: '', voice: 'female', state: 'idle' };
    
    user.voice = 'female';
    user.state = 'idle';
    userData.set(userId, user);
    
    ctx.reply('‚úÖ –í—ã–±—Ä–∞–Ω –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å', createMainKeyboard(user));
});

bot.hears('üéµ –ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å', (ctx) => {
    const userId = ctx.from.id;
    const user = userData.get(userId) || { images: [], text: '', voice: 'female', state: 'idle' };
    
    user.voice = 'male';
    user.state = 'idle';
    userData.set(userId, user);
    
    ctx.reply('‚úÖ –í—ã–±—Ä–∞–Ω –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å', createMainKeyboard(user));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
bot.hears('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', (ctx) => {
    const userId = ctx.from.id;
    const user = userData.get(userId) || { images: [], text: '', voice: 'female', state: 'idle' };
    
    user.state = 'idle';
    userData.set(userId, user);
    
    ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', createMainKeyboard(user));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
bot.on('photo', async (ctx) => {
    const userId = ctx.from.id;
    const user = userData.get(userId);
    
    if (!user || user.state !== 'waiting_for_image') {
        return;
    }
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const photo = ctx.message.photo[ctx.message.photo.length - 1]; // –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const file = await ctx.telegram.getFile(photo.file_id);
        
        // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const imagePath = path.join(UPLOADS_DIR, `image_${uuidv4()}.jpg`);
        const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;
        const response = await axios({
            method: 'GET',
            url: fileUrl,
            responseType: 'arraybuffer'
        });
        
        await fs.writeFile(imagePath, response.data);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.images.push(imagePath);
        user.state = 'idle';
        userData.set(userId, user);
        
        ctx.reply(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${user.images.length}`, createMainKeyboard(user));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ
        if (user.images.length > 0 && user.text) {
            ctx.reply('üé¨ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ...');
            await createAndSendVideo(ctx, userId);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', createMainKeyboard(user));
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const user = userData.get(userId);
    
    if (!user || user.state !== 'waiting_for_text') {
        return;
    }
    
    const text = ctx.message.text;
    
    if (text.length > 200) {
        ctx.reply('‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.', createMainKeyboard(user));
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    user.text = text;
    user.state = 'idle';
    userData.set(userId, user);
    
    ctx.reply(`‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç: "${text.substring(0, 50)}${text.length > 50 ? '...' : ''}"`, createMainKeyboard(user));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ
    if (user.images.length > 0 && user.text) {
        ctx.reply('üé¨ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ...');
        await createAndSendVideo(ctx, userId);
    }
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
async function createAndSendVideo(ctx, userId) {
    try {
        const user = userData.get(userId);
        
        if (!user || !user.images.length || !user.text) {
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg
        const ffmpegAvailable = await checkFFmpeg();
        if (!ffmpegAvailable) {
            ctx.reply('‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ.', createMainKeyboard(user));
            return;
        }
        
        let outputPath;
        
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TTS –∞—É–¥–∏–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
            ctx.reply(`üéµ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–∑–≤—É—á–∫—É (${user.voice === 'female' ? '–∂–µ–Ω—Å–∫–∏–π' : '–º—É–∂—Å–∫–æ–π'} –≥–æ–ª–æ—Å)...`);
            const audioPath = await generateTTS(user.text, user.voice, UPLOADS_DIR);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
            if (!(await fs.pathExists(audioPath))) {
                throw new Error('–§–∞–π–ª TTS –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
            }
            
            // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —Å –∞—É–¥–∏–æ (15 —Å–µ–∫—É–Ω–¥, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
            ctx.reply('üé¨ –°–æ–∑–¥–∞—é 15-—Å–µ–∫—É–Ω–¥–Ω–æ–µ –≤–∏–¥–µ–æ —Å –æ–∑–≤—É—á–∫–æ–π (720x1280)...');
            outputPath = path.join(OUTPUT_DIR, `video_${uuidv4()}.mp4`);
            await createVideo(user.images, audioPath, user.text, outputPath);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –∞—É–¥–∏–æ:', error);
            
            // Fallback: –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞
            ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∑–≤—É—á–∫—É. –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞...');
            outputPath = path.join(OUTPUT_DIR, `video_simple_${uuidv4()}.mp4`);
            await createSimpleVideo(user.images, user.text, outputPath);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ
        if (!(await fs.pathExists(outputPath))) {
            throw new Error('–í–∏–¥–µ–æ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ');
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        ctx.reply('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...');
        await ctx.replyWithVideo({ source: outputPath }, { 
            caption: 'üé¨ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! (15 —Å–µ–∫—É–Ω–¥, 720x1280)',
            reply_markup: createMainKeyboard(user).reply_markup 
        });
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å
        userData.set(userId, { images: [], text: '', voice: user.voice, state: 'idle' });
        
        // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
        setTimeout(async () => {
            try {
                await fs.remove(outputPath);
                console.log(`–í–∏–¥–µ–æ —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: ${outputPath}`);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞:', error);
            }
        }, 60000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ:', error);
        const user = userData.get(userId) || { images: [], text: '', voice: 'female', state: 'idle' };
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', createMainKeyboard(user));
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
    const userId = ctx.from?.id;
    const user = userData.get(userId) || { images: [], text: '', voice: 'female', state: 'idle' };
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', createMainKeyboard(user));
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é FFmpeg...');
        const ffmpegAvailable = await checkFFmpeg();
        
        if (!ffmpegAvailable) {
            console.log('‚ö†Ô∏è FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–∏–¥–µ–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –±–µ–∑ –∑–≤—É–∫–∞.');
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.launch();
        
        console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
        console.log('üì± –ò–º—è –±–æ—Ç–∞: gptchat_mac_bot');
        console.log('üîó –¢–æ–∫–µ–Ω:', BOT_TOKEN);
        console.log('üìÅ –ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:', { uploads: UPLOADS_DIR, output: OUTPUT_DIR });
        console.log('üì∫ –§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ: 720x1280 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π)');
        console.log('üéµ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ–ª–æ—Å–æ–≤: –º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    }
}

startBot();

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
